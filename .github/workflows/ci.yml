name: 🔧 Build & Test SDR Radio Apps

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'java/**'
      - 'java_2/**'
      - 'kotlin/**'
      - 'cpp/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'java/**'
      - 'java_2/**'
      - 'kotlin/**'
      - 'cpp/**'

env:
  JAVA_VERSION: '21'
  ANDROID_API_LEVEL: '35'
  ANDROID_BUILD_TOOLS: '35.0.0'

jobs:
  validate:
    name: 🔍 Validate Projects
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.detect.outputs.projects }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect changed projects
        id: detect
        run: |
          PROJECTS=()
          if [ -f "java/build.gradle" ]; then PROJECTS+=("java"); fi
          if [ -f "java_2/build.gradle" ]; then PROJECTS+=("java_2"); fi
          if [ -f "kotlin/build.gradle" ]; then PROJECTS+=("kotlin"); fi
          if [ -f "cpp/build.gradle" ]; then PROJECTS+=("cpp"); fi
          
          PROJECTS_JSON=$(printf '%s\n' "${PROJECTS[@]}" | jq -R . | jq -s .)
          echo "projects=${PROJECTS_JSON}" >> $GITHUB_OUTPUT
          echo "📱 Detected projects: ${PROJECTS[*]}"

  build-matrix:
    name: 🏗️ Build ${{ matrix.project }}
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.projects != '[]'
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.validate.outputs.projects) }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🤖 Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}

      - name: 📦 Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ matrix.project }}/.gradle
          key: gradle-${{ matrix.project }}-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ matrix.project }}-${{ runner.os }}-
            gradle-${{ runner.os }}-

      - name: 🔧 Make gradlew executable
        run: |
          cd ${{ matrix.project }}
          chmod +x gradlew

      - name: 🔍 Validate Gradle wrapper
        run: |
          cd ${{ matrix.project }}
          ./gradlew --version

      - name: 🧹 Clean project
        run: |
          cd ${{ matrix.project }}
          ./gradlew clean

      - name: 🔨 Build Debug APK
        run: |
          cd ${{ matrix.project }}
          ./gradlew assembleDebug --stacktrace --info

      - name: 🧪 Run unit tests
        run: |
          cd ${{ matrix.project }}
          ./gradlew test --continue || true

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.project }}-debug-apk
          path: ${{ matrix.project }}/app/build/outputs/apk/debug/*.apk
          retention-days: 7

      - name: 📋 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.project }}-test-results
          path: |
            ${{ matrix.project }}/app/build/test-results/
            ${{ matrix.project }}/app/build/reports/
          retention-days: 3

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.projects != '[]'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🔍 Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: 🏗️ Build for analysis
        run: |
          for project in java java_2 kotlin cpp; do
            if [ -f "$project/build.gradle" ]; then
              echo "Building $project for analysis..."
              cd $project
              chmod +x gradlew
              ./gradlew assembleDebug || echo "Build failed for $project"
              cd ..
            fi
          done

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  lint-check:
    name: 🧹 Lint & Code Quality
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.projects != '[]'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🤖 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 📦 Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-lint-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}

      - name: 🧹 Run Android Lint
        run: |
          for project in java java_2 kotlin cpp; do
            if [ -f "$project/build.gradle" ]; then
              echo "🔍 Linting $project..."
              cd $project
              chmod +x gradlew
              ./gradlew lint || echo "Lint issues found in $project"
              cd ..
            fi
          done

      - name: 📊 Upload lint reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports
          path: |
            */app/build/reports/lint-results-*.html
            */app/build/reports/lint-results-*.xml
          retention-days: 7

  release-build:
    name: 🚀 Release Build
    runs-on: ubuntu-latest
    needs: [validate, build-matrix]
    if: github.ref == 'refs/heads/main' && needs.validate.outputs.projects != '[]'
    strategy:
      matrix:
        project: ${{ fromJson(needs.validate.outputs.projects) }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🤖 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🔧 Make gradlew executable
        run: |
          cd ${{ matrix.project }}
          chmod +x gradlew

      - name: 🏗️ Build Release APK
        run: |
          cd ${{ matrix.project }}
          ./gradlew assembleRelease --stacktrace

      - name: 📱 Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-release-apk
          path: ${{ matrix.project }}/app/build/outputs/apk/release/*.apk
          retention-days: 30

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [build-matrix, security-scan, lint-check]
    if: always()
    steps:
      - name: 📊 Check build status
        run: |
          if [ "${{ needs.build-matrix.result }}" == "success" ]; then
            echo "✅ All builds successful!"
          else
            echo "❌ Some builds failed"
            exit 1
          fi

      - name: 🔒 Check security status
        run: |
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ Security scan passed!"
          else
            echo "⚠️ Security scan issues found"
          fi

      - name: 🧹 Check lint status  
        run: |
          if [ "${{ needs.lint-check.result }}" == "success" ]; then
            echo "✅ Code quality checks passed!"
          else
            echo "⚠️ Code quality issues found"
          fi
